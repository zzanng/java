###OOP (Object Oriented Programming)

- 객체들 상호간에 메세지를 주고받도록 프로그래밍하는 기법 
- 메세지전달: 메소드 호출 (method invocation)
- 클래스(class) : 객체를 생성하기 위한 틀 (Template Of Object)
- 객체(object) = 데이터( member variable) + 기능 (member method)
- 함수(function) : 한번에 수행할 문장들의 집합
- 메소드(method) : 함수 중에서 객체로 접근할 수 있는 함수


설계도(Template Of Object) => class 
구현체(implementation) => object

o/s memory

JVM memory
--------------------------------------------------------------------------------------------------------
Method area    |  class code        /Car.class ,     startCar,stopCar,accelCar,...                         |
(static) 공유     |    								  |
--------------------------------------------------------------------------------------------------------
									  |
Heap area         [객체.         [car1(carName,color,tireCount)], [car2(carName,color,tireCount)]  |
(non-static)								  |
		[문자열 저장소, Stringstorege]					  |
     *Out of memory error =메모리 꽉차서 , 해결 안됨. /익셉션이랑 다름.  			  |
---------------------------------------------------------------------------------------------------------
Stack area        [ main- method - - -  - 호출 순서 쌓임                                                   |
        *stack overflow error 메소드 잘못 부르고 있을? 어디서 순환참조가 계속 되고 있다.
									  |
---------------------------------------------------------------------------------------------------------



new 연산자 

Car 	car1	 =	 new 	Car() <-생성자
Car타입 객체참조변수 	   ↘Car생성자를 호출, 새로운 Car 타입 객체를 heap에 생성 =>생성된 객체 주소  => 참조값
									        해쉬 알고리즘










#JVM의 메모리 
method area :클래스의 바이너리코드, 메소드, static 멤버변수
heap area : 객체,non-static 멤버변수
stack area : 메소드 호출 스택

#JVM 실행 시점
코딩 > 컴파일 > 클래스로딩 > 런타임
클래스 로딩 : method area가 메모리에 생성되는시점
런타임 (run time): 객체가 생성되고 어플리케이션이 실행되는 시점 


#static 
1. 모든 객체가 공유= 어떤 객체에서 static 변수 값을 변경하면 
		모든 객체에서 static 변수 값이 같이 변경 
2. 클래스 로딩 타임 = 객체가 없다 =  객체없이 사용할 데이터 / 기능 

*main 메소드를 static 으로 선언해야하는 이유 
  : 객체없이 호출해야하는 엔트리메소드 이므로, 

메모리 낭비가 될수있,


### 생성자 (Constructor)
*역할 : 객체가 생성될때 객체의 멤버변수들을 초기화
*형태 
- 반환타입이 없다. (void 불가) 
- 생성자명은 클래스명 
- 만약에 Board 라는 클래스의 생성자 라면 
 1.Board() : 기본생성자 (default constructor), 기본생성자는 코딩하지 않아도 자동으로 생성됨.  Board() { }  
 2.Board(int articleNo) : 파라미터가 있는 생성자
 ***파라미터 있는 생성자를 클래스에 코딩하면 파라미터가 없는 생성자(기본생성자)를 안만들어줌.

*생성자오버로딩 (constructor overloading)
 - 동일한 이름의 생성자를 파라미터 개수,타입,순서를 달리해서 여러개 만드는것 
 - 목적: 생성자명을 단일화 시킴


##메소드 (Method)
#메소드 : 기능
 -호출해서 실행할 코드의 블럭
 - 메소드 명은 소문자로 시작 
 - 동사로 시작 , getData (O) dataGet (X)
 - 메소드 파라미터(parameter) , 인자(argument) 
1)파라미터: 메소드 선언시에 정의 
2)인자: 메소드 호출시에 정의

메소드 선언 예)
 int add (int a, int b ) {     //a,b 파라미터
 	return a+ b;
 }

메소드 호출 예)
 add(10,20 ) // 10,20 인자
메소드 선언 
접근지정자 (public,private...) [static] 반환타입 메소드명 (파라미터리스트) {
 	... 코드들 
	return;   //제어만 변경, 생략가능 
	return 값; // 값을 반환 , 생각 불가
}
- 메소드는 모듈의 가장 작은 단위로 모듈화 프로그래밍의 기본 
- 하나의 메소드는 하나의 기능만 하도록 하는 것이 가장 좋은 메소드를 만드는 설계 

static 변수
non static  변수 
생성자
static 메소드

































